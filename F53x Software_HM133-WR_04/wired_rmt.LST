C51 COMPILER V9.55   WIRED_RMT                                                             06/27/2022 22:15:58 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE WIRED_RMT
OBJECT MODULE PLACED IN wired_rmt.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE wired_rmt.c OPTIMIZE(2,SIZE) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*************************************************************************
   2           *********** COPYRIGHT (c) 2017 by Joseph Haas (DBA FF Systems)  *********
   3           *
   4           *  File name: bluetooth.c
   5           *
   6           *  Module:    Control
   7           *
   8           *  Summary:   This is the bluetooth control module for the F530 MCU
   9           *
  10           *******************************************************************/
  11          
  12          
  13          /********************************************************************
  14           *  File scope declarations revision history:
  15           *    08-16-20 jmh:  creation date
  16           *
  17           *      03-07-21        jmh
  18           *                              Moved response compare strings to file-global space.
  19           *                              Added "S%,%,#" to init sequence.  Establishes a unique "%---#" quoting pair to disambiguate the
  20           *                                      start of a response.
  21           *
  22           *******************************************************************/
  23          
  24          #include "c8051F520.h"
  25          #include "typedef.h"
  26          #include "init.h"
  27          #include "serial.h"
  28          #include "wired_rmt.h"
  29          
  30          //------------------------------------------------------------------------------
  31          // local defines
  32          //------------------------------------------------------------------------------
  33          
  34          //-----------------------------------------------------------------------------
  35          // Local Variable Declarations
  36          //-----------------------------------------------------------------------------
  37                                                          
  38          idata   char    buf[10];                        // general burpose char buffer
  39          
  40          //------------------------------------------------------------------------------
  41          // local fn declarations
  42          //------------------------------------------------------------------------------
  43          
  44          void txmsg(char* sptr, U8 key, U8 parm);
  45          
  46          //-----------------------------------------------------------------------------
  47          // process_WR() handles wired-remote subsystem
  48          //-----------------------------------------------------------------------------
  49          U8 process_WR(U8 cmd){
  50   1      idata                   char    tbuf[6];                // msg buffer
  51   1      static data     U8              bstate;                 // process state machine vector
  52   1      static data     U8              check_state;    // check button memory
  53   1      static volatile U8              klast;                  // last key
  54   1      //                      U8              r;                              // temp
  55   1      
C51 COMPILER V9.55   WIRED_RMT                                                             06/27/2022 22:15:58 PAGE 2   

  56   1      
  57   1              if(cmd == STATE_INIT){                                                  // initialize BT
  58   2                      wr_timeout(0);
  59   2                      bstate = STATE_0;
  60   2                      check_state = 0;
  61   2                      init_buff();                                                            // clean out serial buffer
  62   2                      klast = '\0';
  63   2                      return 0xff;
  64   2              }
  65   1              //
  66   1              // wired-remote state machine
  67   1              //
  68   1              if(cmd == klast) cmd = K_HOLD;
  69   1              switch(bstate){
  70   2                      default:                                                                        // error state ... init the machine
  71   2                      case STATE_0:                                                           // INIT $$$
  72   2                              putss("#RC900_WRDv0.0%\r");
  73   2                              wait(20);
  74   2                              bstate = STATE_IDLE;
  75   2                              break;
  76   2      
  77   2                      case STATE_IDLE:                                                        // IDLE state
  78   2                              switch(cmd){
  79   3                                      default:
  80   3                                              klast = cmd;
  81   3                                              wr_timeout(WR_HOLD_PER);
  82   3                                              wra_timeout(WR_ABRT_PER);
  83   3                                              txmsg(tbuf, klast, 'p');
  84   3                                              putss(tbuf);
  85   3                                              break;
  86   3      
  87   3                                      case K_HOLD:
  88   3                                              if(wr_timeout(0)){
  89   4                                                      wr_timeout(WR_HOLD_PER);
  90   4                                                      wra_timeout(WR_ABRT_PER);
  91   4                                                      txmsg(tbuf, klast, 'h');
  92   4                                                      putss(tbuf);
  93   4                                              }
  94   3                                              break;
  95   3      
  96   3                                      case K_REL:
  97   3                                              if(klast){
  98   4                                                      txmsg(tbuf, klast, 'r');
  99   4                                                      putss(tbuf);
 100   4                                                      klast = '\0';
 101   4                                                      wr_clr();
 102   4                                              }
 103   3                                              break;
 104   3      
 105   3                                      case K_NULL:
 106   3                                              if(klast){
 107   4                                                      if(wra_timeout(0)){
 108   5                                                              txmsg(tbuf, klast, 'R');
 109   5                                                              putss(tbuf);
 110   5                                                              klast = '\0';
 111   5                                                              wr_clr();
 112   5                                                      }
 113   4                                              }
 114   3                                              break;
 115   3                              }
 116   2                              break;
 117   2                      }
C51 COMPILER V9.55   WIRED_RMT                                                             06/27/2022 22:15:58 PAGE 3   

 118   1              return 0xff;
 119   1      }
 120          
 121          //
 122          //-----------------------------------------------------------------------------
 123          // txmsg() creates a remote command message
 124          //      sptr is the string ptr, key is the cmd code, and parm is the parameter
 125          //-----------------------------------------------------------------------------
 126          
 127          void txmsg(char* sptr, U8 key, U8 parm)
 128          {
 129   1      
 130   1              *sptr++ = PREAMB;
 131   1              *sptr++ = key;
 132   1              *sptr++ = parm;
 133   1              *sptr++ = (key ^ parm) | 0x80;
 134   1              *sptr++ = EOL;
 135   1              *sptr = '\0';
 136   1              return;
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    360    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       6
   IDATA SIZE       =     10       6
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
